
//----------------------------------------------------
// The following code was generated by C# CUP v0.1
// 11/21/2012 5:32:15 PM
//----------------------------------------------------

namespace TinyCompiler.parser
 {

using TinyCompiler.ast;
using TinyCompiler.util;
using System.Collections;
using TinyCompiler.tabla;
using TUVienna.CS_CUP.Runtime;
using TUVienna.CS_CUP;

/** C# CUP v0.1 generated parser.
  * @version 11/21/2012 5:32:15 PM
  */
public class TinyParser : TUVienna.CS_CUP.Runtime.lr_parser {

  /** Default constructor. */
  public TinyParser():base() {;}

  /** Constructor which sets the default scanner. */
  public TinyParser(TUVienna.CS_CUP.Runtime.Scanner s): base(s) {;}

  /** Production table. */
  protected static readonly short[][] _production_table = 
    unpackFromStrings(new string[] {
    "/000/037/000/002/002/004/000/002/003/003/000/002/004" +
    "/005/000/002/004/003/000/002/005/003/000/002/005/003" +
    "/000/002/005/003/000/002/005/003/000/002/005/003/000" +
    "/002/006/007/000/002/006/011/000/002/007/006/000/002" +
    "/010/005/000/002/011/004/000/002/012/003/000/002/012" +
    "/002/000/002/013/003/000/002/013/005/000/002/014/005" +
    "/000/002/014/005/000/002/014/003/000/002/015/005/000" +
    "/002/015/005/000/002/015/003/000/002/016/005/000/002" +
    "/016/005/000/002/016/003/000/002/017/005/000/002/017" +
    "/003/000/002/017/003/000/002/017/003" });

  /** Access to production table. */
  public override short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static readonly short[][] _action_table = 
    unpackFromStrings(new string[] {
    "/000/065/000/012/003/012/020/016/021/014/025/010/001" +
    "/002/000/004/002/067/001/002/000/014/002/ufffe/010/ufffe" +
    "/023/ufffe/024/ufffe/026/ufffe/001/002/000/014/002/ufffb/010" +
    "/ufffb/023/ufffb/024/ufffb/026/ufffb/001/002/000/014/002/ufffd" +
    "/010/ufffd/023/ufffd/024/ufffd/026/ufffd/001/002/000/012/003" +
    "/012/020/016/021/014/025/010/001/002/000/014/002/ufffc" +
    "/010/ufffc/023/ufffc/024/ufffc/026/ufffc/001/002/000/014/002" +
    "/ufff9/010/ufff9/023/ufff9/024/ufff9/026/ufff9/001/002/000/006" +
    "/002/000/010/056/001/002/000/012/003/025/014/024/017" +
    "/021/020/030/001/002/000/014/002/ufffa/010/ufffa/023/ufffa" +
    "/024/ufffa/026/ufffa/001/002/000/026/002/ufff2/003/025/010" +
    "/ufff2/014/024/016/023/017/021/020/030/023/ufff2/024/ufff2" +
    "/026/ufff2/001/002/000/016/002/ufff1/010/ufff1/011/ufff1/023" +
    "/ufff1/024/ufff1/026/ufff1/001/002/000/014/002/ufff4/010/ufff4" +
    "/023/ufff4/024/ufff4/026/ufff4/001/002/000/036/002/uffe5/004" +
    "/uffe5/005/uffe5/006/uffe5/007/uffe5/010/uffe5/011/uffe5/012/uffe5" +
    "/013/uffe5/015/uffe5/022/uffe5/023/uffe5/024/uffe5/026/uffe5/001" +
    "/002/000/036/002/uffe7/004/uffe7/005/uffe7/006/uffe7/007/uffe7" +
    "/010/uffe7/011/uffe7/012/uffe7/013/uffe7/015/uffe7/022/uffe7/023" +
    "/uffe7/024/uffe7/026/uffe7/001/002/000/012/003/025/014/024" +
    "/017/021/020/030/001/002/000/012/003/025/014/024/017" +
    "/021/020/030/001/002/000/036/002/uffe3/004/uffe3/005/uffe3" +
    "/006/uffe3/007/uffe3/010/uffe3/011/uffe3/012/uffe3/013/uffe3/015" +
    "/uffe3/022/uffe3/023/uffe3/024/uffe3/026/uffe3/001/002/000/036" +
    "/002/uffea/004/uffea/005/uffea/006/042/007/041/010/uffea/011" +
    "/uffea/012/uffea/013/uffea/015/uffea/022/uffea/023/uffea/024/uffea" +
    "/026/uffea/001/002/000/032/002/uffed/004/036/005/037/010" +
    "/uffed/011/uffed/012/034/013/035/015/uffed/022/uffed/023/uffed" +
    "/024/uffed/026/uffed/001/002/000/036/002/uffe4/004/uffe4/005" +
    "/uffe4/006/uffe4/007/uffe4/010/uffe4/011/uffe4/012/uffe4/013/uffe4" +
    "/015/uffe4/022/uffe4/023/uffe4/024/uffe4/026/uffe4/001/002/000" +
    "/016/002/ufff3/010/ufff3/011/032/023/ufff3/024/ufff3/026/ufff3" +
    "/001/002/000/012/003/025/014/024/017/021/020/030/001" +
    "/002/000/016/002/ufff0/010/ufff0/011/ufff0/023/ufff0/024/ufff0" +
    "/026/ufff0/001/002/000/012/003/025/014/024/017/021/020" +
    "/030/001/002/000/012/003/025/014/024/017/021/020/030" +
    "/001/002/000/012/003/025/014/024/017/021/020/030/001" +
    "/002/000/012/003/025/014/024/017/021/020/030/001/002" +
    "/000/036/002/uffeb/004/uffeb/005/uffeb/006/042/007/041/010" +
    "/uffeb/011/uffeb/012/uffeb/013/uffeb/015/uffeb/022/uffeb/023/uffeb" +
    "/024/uffeb/026/uffeb/001/002/000/012/003/025/014/024/017" +
    "/021/020/030/001/002/000/012/003/025/014/024/017/021" +
    "/020/030/001/002/000/036/002/uffe8/004/uffe8/005/uffe8/006" +
    "/uffe8/007/uffe8/010/uffe8/011/uffe8/012/uffe8/013/uffe8/015/uffe8" +
    "/022/uffe8/023/uffe8/024/uffe8/026/uffe8/001/002/000/036/002" +
    "/uffe9/004/uffe9/005/uffe9/006/uffe9/007/uffe9/010/uffe9/011/uffe9" +
    "/012/uffe9/013/uffe9/015/uffe9/022/uffe9/023/uffe9/024/uffe9/026" +
    "/uffe9/001/002/000/036/002/uffec/004/uffec/005/uffec/006/042" +
    "/007/041/010/uffec/011/uffec/012/uffec/013/uffec/015/uffec/022" +
    "/uffec/023/uffec/024/uffec/026/uffec/001/002/000/026/002/uffee" +
    "/004/036/005/037/010/uffee/011/uffee/015/uffee/022/uffee/023" +
    "/uffee/024/uffee/026/uffee/001/002/000/026/002/uffef/004/036" +
    "/005/037/010/uffef/011/uffef/015/uffef/022/uffef/023/uffef/024" +
    "/uffef/026/uffef/001/002/000/004/015/051/001/002/000/036" +
    "/002/uffe6/004/uffe6/005/uffe6/006/uffe6/007/uffe6/010/uffe6/011" +
    "/uffe6/012/uffe6/013/uffe6/015/uffe6/022/uffe6/023/uffe6/024/uffe6" +
    "/026/uffe6/001/002/000/014/002/ufff5/010/ufff5/023/ufff5/024" +
    "/ufff5/026/ufff5/001/002/000/004/022/054/001/002/000/012" +
    "/003/012/020/016/021/014/025/010/001/002/000/010/010" +
    "/056/023/057/024/060/001/002/000/012/003/012/020/016" +
    "/021/014/025/010/001/002/000/012/003/012/020/016/021" +
    "/014/025/010/001/002/000/014/002/ufff8/010/ufff8/023/ufff8" +
    "/024/ufff8/026/ufff8/001/002/000/006/010/056/024/062/001" +
    "/002/000/014/002/ufff7/010/ufff7/023/ufff7/024/ufff7/026/ufff7" +
    "/001/002/000/014/002/uffff/010/uffff/023/uffff/024/uffff/026" +
    "/uffff/001/002/000/006/010/056/026/065/001/002/000/012" +
    "/003/025/014/024/017/021/020/030/001/002/000/014/002" +
    "/ufff6/010/ufff6/023/ufff6/024/ufff6/026/ufff6/001/002/000/004" +
    "/002/001/001/002" });

  /** Access to parse-action table. */
  public override short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static readonly short[][] _reduce_table = 
    unpackFromStrings(new string[] {
    "/000/065/000/020/003/003/004/012/005/004/006/006/007" +
    "/010/010/005/011/014/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/016/004" +
    "/063/005/004/006/006/007/010/010/005/011/014/001/001" +
    "/000/002/001/001/000/002/001/001/000/002/001/001/000" +
    "/012/014/052/015/026/016/025/017/021/001/001/000/002" +
    "/001/001/000/016/012/017/013/030/014/016/015/026/016" +
    "/025/017/021/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/012/014/051/015" +
    "/026/016/025/017/021/001/001/000/012/014/047/015/026" +
    "/016/025/017/021/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/012/014/032/015/026/016/025/017/021/001/001/000" +
    "/002/001/001/000/010/015/046/016/025/017/021/001/001" +
    "/000/010/015/045/016/025/017/021/001/001/000/006/016" +
    "/044/017/021/001/001/000/006/016/037/017/021/001/001" +
    "/000/002/001/001/000/004/017/043/001/001/000/004/017" +
    "/042/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/016/004/054/005/004/006/006/007/010/010/005/011" +
    "/014/001/001/000/002/001/001/000/014/005/062/006/006" +
    "/007/010/010/005/011/014/001/001/000/016/004/060/005" +
    "/004/006/006/007/010/010/005/011/014/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/012/014/065/015/026/016/025" +
    "/017/021/001/001/000/002/001/001/000/002/001/001" });

  /** Access to <code>reduce_goto</code> table. */
  public override short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_TinyParser_actions action_obj;

  /** Action encapsulation object initializer. */
  protected override void init_actions()
    {
      action_obj = new CUP_TinyParser_actions(this);
    }

  /** Invoke a user supplied parse action. */
  public override TUVienna.CS_CUP.Runtime.Symbol do_action(
    int                        act_num,
    TUVienna.CS_CUP.Runtime.lr_parser parser,
    System.Collections.Stack            xstack1,
    int                        top)
  {
  mStack CUP_parser_stack= new mStack(xstack1);
    /* call code in generated class */
    return action_obj.CUP_TinyParser_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public override int start_state() {return 0;}
  /** Indicates start production. */
  public override int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public override int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public override int error_sym() {return 1;}



    int omerrs = 0;

    public int getOmerrs(){
        return omerrs;
    }

    public override void syntax_error(Symbol cur_token) {
        int lineno = action_obj.getLinea();
        int column = action_obj.getColumna();
		string filename = action_obj.getNombreArchivo().Texto;
        System.Console.Error.Write(filename + ": " + lineno 
		         + ":" + column + ": error de sintáxis cerca de ");
        Utilidades.imprimirToken(cur_token);
		omerrs++;
		if (omerrs>50) {
			System.Console.Error.Write("El análisis se ha detenido porque se encontraron muchos errores");
			System.Environment.Exit(1);
		}
    }

    public override void unrecovered_syntax_error(Symbol cur_token)
	{
    }

	public override void report_fatal_error(string   message, object   info)
	{
		Utilidades.fatalError("ha ocurrido un error irrecuperable");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
public class CUP_TinyParser_actions {

 

    public int getLinea() {
		return ((TinyLexer)my_parser.getScanner()).getLinea();
    }

    public int getColumna(){
        return ((TinyLexer)my_parser.getScanner()).getColumna();
    }

    public SimboloAbstracto getNombreArchivo() {
		return ((TinyLexer)my_parser.getScanner()).getNombreArchivo();
    }

  private TinyParser my_parser;

  /** Constructor */
  public CUP_TinyParser_actions(TinyParser t_parser) {
    this.my_parser = t_parser;
  }

  /** Method with the actual generated action code. */
  public   TUVienna.CS_CUP.Runtime.Symbol CUP_TinyParser_do_action(
    int                        CUP_TinyParser_act_num,
    TUVienna.CS_CUP.Runtime.lr_parser CUP_TinyParser_parser,
    System.Collections.Stack            xstack1,
    int                        CUP_TinyParser_top)
    {
      /* Symbol object for return from actions */
      mStack CUP_TinyParser_stack =new mStack(xstack1);
      TUVienna.CS_CUP.Runtime.Symbol CUP_TinyParser_result;

      /* select the action based on the action number */
      switch (CUP_TinyParser_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= error 
            {
              Expresion RESULT = null;

              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*factor*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= IDENTIFICADOR 
            {
              Expresion RESULT = null;
		SimboloAbstracto id = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Variable(id, id.Linea, id.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*factor*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= LIT_ENTERO 
            {
              Expresion RESULT = null;
		SimboloAbstracto val = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new NumeroEntero(val, val.Linea, val.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*factor*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= PARENT_IZQ exp PARENT_DER 
            {
              Expresion RESULT = null;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		
        RESULT = e;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*factor*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= factor 
            {
              Expresion RESULT = null;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = e;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*term*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term DIVISION factor 
            {
              Expresion RESULT = null;
		Expresion e1 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto d = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e2 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Division(e1, e2, d.Linea, d.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*term*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term MULTIPLICACION factor 
            {
              Expresion RESULT = null;
		Expresion e1 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto m = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e2 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Multiplicacion(e1, e2, m.Linea, m.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*term*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp_simple ::= term 
            {
              Expresion RESULT = null;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = e;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*exp_simple*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp_simple ::= exp_simple RESTA term 
            {
              Expresion RESULT = null;
		Expresion e1 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto r = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e2 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Resta(e1, e2, r.Linea, r.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*exp_simple*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp_simple ::= exp_simple SUMA term 
            {
              Expresion RESULT = null;
		Expresion e1 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto s = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e2 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Suma(e1, e2, s.Linea, s.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*exp_simple*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp_simple 
            {
              Expresion RESULT = null;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = e;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(10/*exp*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp_simple IGUAL exp_simple 
            {
              Expresion RESULT = null;
		Expresion e1 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto i = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e2 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Igual(e1, e2, i.Linea, i.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(10/*exp*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp_simple MENOR exp_simple 
            {
              Expresion RESULT = null;
		Expresion e1 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto m = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e2 = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Menor(e1, e2, m.Linea, m.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(10/*exp*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // args ::= args COMA exp 
            {
              ListaParametros RESULT = null;
		ListaParametros p = (ListaParametros)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        p.agregarElemento(e);
        RESULT = p;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(9/*args*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args ::= exp 
            {
              ListaParametros RESULT = null;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new ListaParametros();
        RESULT.agregarElemento(e);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(9/*args*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opt_args ::= 
            {
              ListaParametros RESULT = null;
		
        RESULT = new ListaParametros();
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(8/*opt_args*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opt_args ::= args 
            {
              ListaParametros RESULT = null;
		ListaParametros p = (ListaParametros)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = p;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(8/*opt_args*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fuction_call ::= IDENTIFICADOR opt_args 
            {
              Sentencia RESULT = null;
		SimboloAbstracto id = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		ListaParametros p = (ListaParametros)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new LLamadaFuncion(id, p, id.Linea, id.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(7/*fuction_call*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_assign ::= IDENTIFICADOR ASIGNACION exp 
            {
              Sentencia RESULT = null;
		SimboloAbstracto id = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		SimboloAbstracto a = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		Expresion e = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Asignacion(new Variable(id, id.Linea, id.Columna), e, a.Linea, a.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(6/*sent_assign*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_repeat ::= REPITA secuencia_sent HASTA exp 
            {
              Sentencia RESULT = null;
		SimboloAbstracto r = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-3)).value;
		ListaSentencia s = (ListaSentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		Expresion c = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new RepitaHasta(c, s, r.Linea, r.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(5/*sent_repeat*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent_if ::= SI exp ENTONCES secuencia_sent SINO secuencia_sent FIN 
            {
              Sentencia RESULT = null;
		SimboloAbstracto s = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-6)).value;
		Expresion c = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-5)).value;
		ListaSentencia en = (ListaSentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-3)).value;
		ListaSentencia sn = (ListaSentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		
        RESULT = new Condicional(c, en, sn, s.Linea, s.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*sent_if*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent_if ::= SI exp ENTONCES secuencia_sent FIN 
            {
              Sentencia RESULT = null;
		SimboloAbstracto s = (SimboloAbstracto)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-4)).value;
		Expresion c = (Expresion)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-3)).value;
		ListaSentencia en = (ListaSentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		
        RESULT = new Condicional(c, en, null, s.Linea, s.Columna);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*sent_if*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= error 
            {
              Sentencia RESULT = null;

              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= fuction_call 
            {
              Sentencia RESULT = null;
		Sentencia s = (Sentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		 RESULT = s; 
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= sent_assign 
            {
              Sentencia RESULT = null;
		Sentencia s = (Sentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		 RESULT = s; 
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_repeat 
            {
              Sentencia RESULT = null;
		Sentencia s = (Sentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		 RESULT = s; 
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_if 
            {
              Sentencia RESULT = null;
		Sentencia s = (Sentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		 RESULT = s; 
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // secuencia_sent ::= sent 
            {
              ListaSentencia RESULT = null;
		Sentencia s = (Sentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new ListaSentencia();
        RESULT.agregarElemento(s);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*secuencia_sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // secuencia_sent ::= secuencia_sent PUNTO_Y_COMA sent 
            {
              ListaSentencia RESULT = null;
		ListaSentencia sc = (ListaSentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-2)).value;
		Sentencia s = (Sentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        sc.agregarElemento(s);
        RESULT = sc;
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*secuencia_sent*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= secuencia_sent 
            {
              Programa RESULT = null;
		ListaSentencia sc = (ListaSentencia)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-0)).value;
		
        RESULT = new Programa(sc, 1, 0);
    
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*programa*/, RESULT);
            }
          return CUP_TinyParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              object RESULT = null;
		Programa start_val = (Programa)((TUVienna.CS_CUP.Runtime.Symbol) CUP_TinyParser_stack.elementAt(CUP_TinyParser_top-1)).value;
		RESULT = start_val;
              CUP_TinyParser_result = new TUVienna.CS_CUP.Runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP_TinyParser_parser.done_parsing();
          return CUP_TinyParser_result;

          /* . . . . . .*/
          default:
            throw new System.Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
